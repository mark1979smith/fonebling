<?php
/**
 * Created by PhpStorm.
 * User: Mark
 * Date: 10/08/2015
 * Time: 20:32
 */?>
<div class="row" id="page__collection">

    <div class="col-sm-4" id="collection__filters">
        <h2>Filters</h2>
        <p><small><label><input type="radio" name="bundles" value="include" checked="checked" /> Include Bundles</label> <label><input type="radio" name="bundles" value="exclude" /> Exclude Bundles</label></small></p>
        <p>
            <label for="amount">Price range:</label>
            <span id="amount"></span>
        </p>

        <input type="hidden" name="filter_min_price" id="filter_min_price" value=""/>
        <input type="hidden" name="filter_max_price" id="filter_max_price" value=""/>

        <div id="slider-range"></div>

        <?php
        echo '<h4>Product Types</h4>';
            echo $this->Navigation()->setProducts($this->products)->productTypes();
         ?>


    </div>
    <div class="col-sm-8 collection" data-total-price="<?= $this->json($this->Data()->getKeyValue($this->products, '[0-9]+.price_incl_shipping')) ?>">
        <div class="nav"></div>
        <?php echo $this->partialLoop('application\_partials\product.phtml', $this->Data()->asArray($this->products)) ?>
        <div class="nav"></div>
    </div>


</div>


<?php $this->inlineScript()->captureStart();
echo <<<JS
$(function() {
    var prices = $('.collection').data('total-price');

    var min_price   = Math.floor(Math.min.apply(Math,prices));
    var max_price   = Math.floor(Math.max.apply(Math,prices));

    var per_page    = 2;
    var page_number = 1;
    var pages_count = 1;

    /** PRICE SLIDER **/
    $( "#slider-range" ).slider({

        range: true,
        min: min_price,
        max: max_price,
        values: [ min_price , max_price ],
        animate: true,
        slide: function( event, ui ) {
            var low =  ui.values[ 0 ];
            var high =  ui.values[ 1 ];
            $( "#amount" ).html( "&pound;" + low + " - &pound;" + high );
            $( "#filter_min_price" ).val( low );
            $( "#filter_max_price" ).val( high );

            var list = [];
            for (var i = low; i <= high; i++) {
                list.push(i);
            }

        filter(per_page);
        paginateProducts();
        nav();
        }

    });
    $( "#filter_min_price" ).val( min_price );
    $( "#filter_max_price" ).val( max_price );
    $( "#amount" ).html( "&pound;" + min_price +
      " - &pound;" + max_price );

    /** INCLUDE/EXCLUDE BUNDLES **/
    $('#collection__filters').on('click', 'input:radio[name="bundles"]', function(e) {
        filter();
        paginateProducts();
        nav();
    });

    /** SELECT/DESELECT ALL PRODUCT TYPES **/
    $('.navigation--product-types').on('click', 'li:first :checkbox', function(e) {
        $(this).closest('.navigation--product-types').find(':checkbox').prop('checked', $(this).is(':checked'));

        filter();
        paginateProducts();
        nav();
    });

    /** ON CHANGING INDIVIDUAL PRODUCT TYPES **/
    $('.navigation--product-types').on('click', 'li:gt(0) :checkbox', function(e) {
        var count_all_options = $(this).closest('.navigation--product-types').find('li:gt(0)').length;
        var selected_options  = $(this).closest('.navigation--product-types').find('li:gt(0) :checkbox:checked').length;

        $(this).closest('.navigation--product-types').find('li:first :checkbox').prop('checked', (selected_options == count_all_options));

        filter();
        paginateProducts();
        nav();
    });

    /** ON NAVIGATING TO A PAGE **/
    $('.nav').on('click', '.pagination-link', function(e) {
        page_number = $(this).data('page-number');
        /** Hide all products **/
        $('.collection').find('.row').hide();

        /** Only show products for the required page **/
        $('.collection').find('.row[data-page=' + page_number +']').show();

        nav();
    });


    filter();
    paginateProducts();
    nav();

    /**
    * Filter products based on side menu selected options
    */
    function filter()
    {

    var show_product_if_matched = true;

    /** Hide row to begin with **/
    $('.collection').find('.row').hide();
    $('.collection').find('.row').removeAttr('data-page');

    $('.collection').find('.row').each(function( index ) {
        var row = $(this);
        /**
        * Iterate over attributes available on row
        */
        for (attribute in $(row).data()) {
            /**
            * Iterate over checkboxes in filter list
            */
            $('.navigation--product-types li :checkbox:checked').each(function( index ) {
                if ($(this).data(attribute) != undefined) {
                    if (
                        /** If row data attribute is array and checkbox data attribute exists in array **/
                        ($.isArray($(row).data(attribute)) && $.inArray($(this).data(attribute), $(row).data(attribute)) != '-1') ||
                        /** If row data attribuite is string and checkbox data attribute matches **/
                        (!$.isArray($(row).data(attribute)) && $(this).data(attribute) == $(row).data(attribute))
                    ) {
                        $(row).attr('data-page', '');
                        if (show_product_if_matched) {
                            $(row).show();
                        }
                    }
                }
            });
        }

        /** BUNDLES? **/
        if (
            $.isArray($(row).data('type')) && /** Is Type Array Value **/
            $(row).data('type').length > 1 && /** AND has more than one (ie Bundle) **/
            $('input:radio[name="bundles"]:checked').val() == 'exclude' /** AND we want to exclude Bundles **/
        ) {
            $(row).hide();
            $(row).removeAttr('data-page');
        }

        /** PRICE **/
        if ($(row).is(':visible')) {
            if (($(row).data('total-price') < parseFloat(parseInt($('#filter_min_price').val()) + '.00')) || ($(row).data('total-price') > parseFloat(parseInt($('#filter_max_price').val()) + '.99'))) {
                $(row).hide();
                $(row).removeAttr('data-page');
            }
        }

        /** If we have a full page, we don't want to show anymore products **/
        if ($('.collection').find('.row:visible').length >= ( page_number * per_page )) {
            show_product_if_matched = false;
        }

    });
  }

    /**
    * Build pagination
    */
  function paginateProducts()
  {
    var index = 0;
    /** Iterate over all products **/
    $('.collection').find('.row[data-page=""]').each( function ( i ) {
      if (index < pages_count*per_page && index >= (pages_count-1)*per_page) {
        $(this).attr('data-page', pages_count);
      } else {
        /** Increment page_count value **/
        pages_count++;
        $(this).attr('data-page', pages_count);
      }

      index++;
    });
  }

    function nav()
    {
    /** Only show pagination if we have more than one page **/
    if (pages_count <= 1) {
        $('.collection .nav').html('');
        return;
    }

    /** Build HTML **/
    var page_nav = '<ul>';
    var max_pages_to_display = 5;

    var elements = new Array();
    if (pages_count > max_pages_to_display) {

        max_pages_to_display--;
        var page_number_copy = page_number;
        for(i=1; i<=(max_pages_to_display/2); i++) {
            if (page_number_copy > 1) {
                page_number_copy--;
            }
        }

        for(i=Math.min(page_number_copy, (pages_count-max_pages_to_display)); i<=Math.min((page_number_copy+max_pages_to_display),pages_count); i++) {
            elements.push(i);
        }
    } else {
        for (i=1;i<=pages_count;i++){
           elements.push(i);
        }
    }
    if (pages_count > max_pages_to_display) {
        page_nav += '<li class="pagination-link" data-page-number="1"><a rel="1" href="#">First</a></li>';
    }
    for(i in elements) {
        page_nav += '<li class="pagination-link';
        if ( page_number == elements[i] ) {
            page_nav += ' selected-page';
        }
        page_nav += '" data-page-number="' + elements[i] + '"><a rel="' + elements[i] + '" href="#">' + elements[i] + '</a></li>';
    }
    if (pages_count > max_pages_to_display) {
        page_nav += '<li class="pagination-link" data-page-number="' + pages_count + '"><a rel="' + pages_count + '" href="#">Last</a></li>';
    }

    page_nav += '</ul>';

    // Set HTML
    $('.collection .nav').html(page_nav);
  }
  });


JS;
$this->inlineScript()->captureEnd(); ?>